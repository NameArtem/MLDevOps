{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "https://machine-learning-apps.github.io/MLDevOps/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Deploy",
    "content": "Deploy Model On Your Infrastructure . Fork this project to run the model pipeline on your compute. . Start Learn more .",
    "url": "https://machine-learning-apps.github.io/MLDevOps/deploy",
    "relUrl": "/deploy"
  }
  ,"2": {
    "title": "Home",
    "content": "A MLOps Dashboard Automatically Created With GitHub Pages . This dashboard renders information in your repo relevant to machine learning projects automatically by using GitHub Actions and GitHub Pages. . Learn more Sections: . Summary: uses the /project/model_card.md file located your repo. This is meant to be a high level summary of your model. A recommended format for this is discussed in Model Cards for Model Reporting. . | Data: Dataset metadata was generated and is rendered here. . | Reports: these pages automatically render Jupyter notebooks located in the /notebooks directory of your repo. . | Model Timeline: this is a timeline view of relevant milestones for your ML project. This page is generated by /project/model_timeline.csv in your repo, which is system generated 1. . | Deploy: A click-to-deploy mechanism for others to run your training pipeline and serve your model on the infrastructure of your choice. This is under construction. . | . . This system has not been designed yet.Â &#8617; . |",
    "url": "https://machine-learning-apps.github.io/MLDevOps/",
    "relUrl": "/"
  }
  ,"3": {
    "title": "Reports",
    "content": "Reports are automatically rendered from Jupyter Notebooks located in the /notebooks directory of your repository. You can refresh these reports by commiting new or updated notebooks to the master branch of your repository. .",
    "url": "https://machine-learning-apps.github.io/MLDevOps/docs/reports/",
    "relUrl": "/docs/reports/"
  }
  ,"4": {
    "title": "Title",
    "content": "import pickle, os import numpy as np import pandas as pd import matplotlib.pyplot as plt from azureml.core import Workspace from azureml.core.run import Run from sklearn.datasets import load_diabetes from sklearn.linear_model import Ridge from sklearn.metrics import mean_squared_error, r2_score from sklearn.model_selection import train_test_split from sklearn.externals import joblib . RANDOM_STATE = 42 MODEL_NAME = &quot;mymodel.pkl&quot; . run = Run.get_context() . data_path = os.path.join(os.path.abspath(os.path.join(os.getcwd(), os.pardir)),&#39;data/diabetes.csv&#39;) . df = pd.read_csv(data_path) print(df.info()) df.head() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 442 entries, 0 to 441 Data columns (total 11 columns): AGE 442 non-null float64 SEX 442 non-null float64 BMI 442 non-null float64 BP 442 non-null float64 S1 442 non-null float64 S2 442 non-null float64 S3 442 non-null float64 S4 442 non-null float64 S5 442 non-null float64 S6 442 non-null float64 Y 442 non-null float64 dtypes: float64(11) memory usage: 38.1 KB None . AGE SEX BMI BP S1 S2 S3 S4 S5 S6 Y . 0 | 0.038076 | 0.050680 | 0.061696 | 0.021872 | -0.044223 | -0.034821 | -0.043401 | -0.002592 | 0.019908 | -0.017646 | 151.0 | . 1 | -0.001882 | -0.044642 | -0.051474 | -0.026328 | -0.008449 | -0.019163 | 0.074412 | -0.039493 | -0.068330 | -0.092204 | 75.0 | . 2 | 0.085299 | 0.050680 | 0.044451 | -0.005671 | -0.045599 | -0.034194 | -0.032356 | -0.002592 | 0.002864 | -0.025930 | 141.0 | . 3 | -0.089063 | -0.044642 | -0.011595 | -0.036656 | 0.012191 | 0.024991 | -0.036038 | 0.034309 | 0.022692 | -0.009362 | 206.0 | . 4 | 0.005383 | -0.044642 | -0.036385 | 0.021872 | 0.003935 | 0.015596 | 0.008142 | -0.002592 | -0.031991 | -0.046641 | 135.0 | . df.describe() . AGE SEX BMI BP S1 S2 S3 S4 S5 S6 Y . count | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 4.420000e+02 | 442.000000 | . mean | -3.634599e-16 | 1.296411e-16 | -8.042209e-16 | 1.281655e-16 | -8.835316e-17 | 1.327024e-16 | -4.575274e-16 | 3.780755e-16 | -3.830854e-16 | -3.411950e-16 | 152.133484 | . std | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 4.761905e-02 | 77.093005 | . min | -1.072256e-01 | -4.464164e-02 | -9.027530e-02 | -1.123996e-01 | -1.267807e-01 | -1.156131e-01 | -1.023071e-01 | -7.639450e-02 | -1.260974e-01 | -1.377672e-01 | 25.000000 | . 25% | -3.729927e-02 | -4.464164e-02 | -3.422907e-02 | -3.665645e-02 | -3.424784e-02 | -3.035840e-02 | -3.511716e-02 | -3.949338e-02 | -3.324879e-02 | -3.317903e-02 | 87.000000 | . 50% | 5.383060e-03 | -4.464164e-02 | -7.283766e-03 | -5.670611e-03 | -4.320866e-03 | -3.819065e-03 | -6.584468e-03 | -2.592262e-03 | -1.947634e-03 | -1.077698e-03 | 140.500000 | . 75% | 3.807591e-02 | 5.068012e-02 | 3.124802e-02 | 3.564384e-02 | 2.835801e-02 | 2.984439e-02 | 2.931150e-02 | 3.430886e-02 | 3.243323e-02 | 2.791705e-02 | 211.500000 | . max | 1.107267e-01 | 5.068012e-02 | 1.705552e-01 | 1.320442e-01 | 1.539137e-01 | 1.987880e-01 | 1.811791e-01 | 1.852344e-01 | 1.335990e-01 | 1.356118e-01 | 346.000000 | . X, y = load_diabetes(return_X_y=True) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_STATE) data = {&quot;train&quot;: {&quot;X&quot;: X_train, &quot;y&quot;: y_train}, &quot;test&quot;: {&quot;X&quot;: X_test, &quot;y&quot;: y_test}} alphas = np.arange(0.0, 1.0, 0.05) alpha = alphas[np.random.choice(alphas.shape[0], 1, replace=False)][0] reg = Ridge(alpha=alpha) reg.fit(data[&quot;train&quot;][&quot;X&quot;], data[&quot;train&quot;][&quot;y&quot;]) preds = reg.predict(data[&quot;test&quot;][&quot;X&quot;]) mse = mean_squared_error(preds, data[&quot;test&quot;][&quot;y&quot;]) print(&quot;Alpha is {0:.2f}, and MSE is {1:0.2f}&quot;.format(alpha, mse)) print(&quot;Logging values&quot;) # run.log(&quot;alpha&quot;, alpha) # run.log(&quot;mse&quot;, mse) . Alpha is 0.55, and MSE is 2931.87 Logging values .",
    "url": "https://machine-learning-apps.github.io/MLDevOps/docs/reports/train_am/",
    "relUrl": "/docs/reports/train_am/"
  }
  
}